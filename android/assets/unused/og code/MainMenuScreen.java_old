package com.spentronics.paracorn;

import java.util.Iterator;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.Camera;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.Texture.TextureWrap;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.math.Circle;
import com.badlogic.gdx.math.Intersector;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.TimeUtils;
import com.badlogic.gdx.utils.viewport.ExtendViewport;
import com.badlogic.gdx.utils.viewport.Viewport;

public class MainMenuScreen implements Screen{
	final Paracorn game;
	OrthographicCamera camera;
	Viewport viewport;
	Texture stickTexture;
	Texture groundTexture;
	Texture acornTexture;
	Texture playButton;
	Texture playButtonPressed;
	Texture logoTexture;
	Sound hitStickSound;
	Sound passStickSound;
	Array<Stick> sticks;
	Array<Acorn> acorns;
	float textHeight;
	Sprite ground;
	long lastAcornTime;
	Vector3 touchPos;
	Rectangle playButtonRect;
	
	public MainMenuScreen(final Paracorn gam) {
		game = gam;
		
		touchPos = new Vector3();
		
		camera = new OrthographicCamera();
		viewport = new ExtendViewport(game.width, game.height, camera);
		camera.setToOrtho(false);
		
		textHeight = game.height - 65;
		
		hitStickSound = Gdx.audio.newSound(Gdx.files.internal("hit.wav"));
		passStickSound = Gdx.audio.newSound(Gdx.files.internal("pass.mp3"));
		
		stickTexture = new Texture(Gdx.files.internal("stick2small.png"));
		logoTexture = new Texture(Gdx.files.internal("paracornlogo.png"));
		
		Sprite topLeftStick = new Sprite(stickTexture);
		topLeftStick.setSize(stickTexture.getWidth(), stickTexture.getHeight());
		topLeftStick.setPosition(-stickTexture.getWidth() + 50, textHeight + 20);
		
		Sprite bottomLeftStick = new Sprite(stickTexture);
		bottomLeftStick.setSize(stickTexture.getWidth(), stickTexture.getHeight());
		bottomLeftStick.setPosition(-stickTexture.getWidth() + 130, textHeight - 80);
		
		Sprite topRightStick = new Sprite(stickTexture);
		topRightStick.setFlip(true, false);
		topRightStick.setSize(stickTexture.getWidth(), stickTexture.getHeight());
		topRightStick.setPosition(90, textHeight + 20);
		
		Sprite bottomRightStick = new Sprite(stickTexture);
		bottomRightStick.setFlip(true, false);
		bottomRightStick.setSize(stickTexture.getWidth(), stickTexture.getHeight());
		bottomRightStick.setPosition(170, textHeight - 80);
		
		Stick topStick = new Stick();
		topStick.leftSprite = topLeftStick;
		topStick.rightSprite = topRightStick;
		
		Stick bottomStick = new Stick();
		bottomStick.leftSprite = bottomLeftStick;
		bottomStick.rightSprite = bottomRightStick;
		
		sticks = new Array<Stick>();
		sticks.add(topStick);
		sticks.add(bottomStick);
		
		groundTexture = new Texture(Gdx.files.internal("ground.png"));
		groundTexture.setWrap(TextureWrap.Repeat, TextureWrap.Repeat);
		
		ground = new Sprite(groundTexture);
		
		acornTexture = new Texture(Gdx.files.internal("acorn.png"));
		lastAcornTime = TimeUtils.nanoTime();
		acorns = new Array<Acorn>();
		
		playButton = new Texture(Gdx.files.internal("playbutton.png"));
		
		playButtonRect = new Rectangle();
		playButtonRect.width = playButton.getWidth();
		playButtonRect.height = playButton.getHeight();
		playButtonRect.x = (game.width-playButton.getWidth())/2;
		
		
		viewport.update(200, 400);
	}
	
	@Override
	public void render(float delta) {
		
		if(delta > .04) {
			delta = .04f;
		}
		
		Gdx.gl.glClearColor(0, 0, 0.2f, 1);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
		
		camera.update();
		game.batch.setProjectionMatrix(camera.combined);
		
		if(Gdx.input.justTouched()) {
			camera.unproject(touchPos.set(Gdx.input.getX(), Gdx.input.getY(), 0));
		}
		
		game.batch.begin();
		game.batch.draw(playButton, playButtonRect.x, playButtonRect.y);
		game.batch.draw(logoTexture, 10, textHeight - logoTexture.getHeight());
		for(Stick stick : sticks) {
			stick.leftSprite.draw(game.batch);
			stick.rightSprite.draw(game.batch);
		}
		for(Acorn acorn : acorns) {
			acorn.sprite.draw(game.batch);
		}
		ground.draw(game.batch);
		game.batch.end();
		
		if(Gdx.input.isKeyJustPressed(Keys.SPACE) || Gdx.input.isKeyJustPressed(Keys.ENTER)) {
			//TODO: fade into:
			game.setScreen(new GameScreen(game));
			dispose();
		}
		
		Iterator<Stick> iter = sticks.iterator();
		while(iter.hasNext()) {
			Stick stick = iter.next();
			if(stick.leftSprite.getX() > -10 && !stick.goingLeft) {
				stick.goingLeft = true;
			}
		
			if(stick.leftSprite.getX() < -stick.leftSprite.getWidth() + 30 && stick.goingLeft) {
				stick.goingLeft = false;
			}
			if(stick.goingLeft) {
				stick.leftSprite.translateX(-100 * delta);
				stick.rightSprite.translateX(-100 * delta);
			}
			else{
				stick.leftSprite.translateX(100 * delta);
				stick.rightSprite.translateX(100 * delta);
			}
			Iterator<Acorn> acornIter = acorns.iterator();
			while(acornIter.hasNext()) {
				Acorn acorn = acornIter.next();
				if(Intersector.overlaps(acorn.boundingCircle,stick.leftSprite.getBoundingRectangle()) || Intersector.overlaps(acorn.boundingCircle, stick.rightSprite.getBoundingRectangle())) {
					stick.canScore = false;
					if(!stick.hasHit) {
						hitStickSound.play();
						stick.hasHit = true;
						acorn.speed = -300;
						acorn.isLive = false;
						if(acorn.xspeed == 0) {
							if(stick.goingLeft) {
								acorn.xspeed = -50;
								acorn.rotationSpeed = -20;
							}
							else {
								acorn.xspeed = 50;
								acorn.rotationSpeed = 20;
							}
						}
						else {
							acorn.xspeed *= -1;
							acorn.rotationSpeed *= -1;
							if(acorn.rotationSpeed < 200 && acorn.rotationSpeed > -200) {
								acorn.rotationSpeed *= 2;
							}
						}
					}
				}
				if(stick.canScore && stick.leftSprite.getY() > acorn.boundingCircle.y && acorn.isLive) {
					stick.canScore = false;
					passStickSound.play();
				}
			}
		}
		
		Iterator<Acorn> acornIter = acorns.iterator();
		while(acornIter.hasNext()) {
			Acorn acorn = acornIter.next();
			
			acorn.speed += 1000 * delta;
			acorn.speed += acorn.force * delta;
			
			acorn.sprite.translateY(-acorn.speed * delta);
			acorn.boundingCircle.setPosition(acorn.sprite.getX() + 12, acorn.sprite.getY() + 13);
			acorn.sprite.translateX(acorn.xspeed * delta);
			if(acorn.sprite.getY() < ground.getY()+ground.getHeight() - 4) {
				acorn.sprite.setPosition(acorn.sprite.getX(), ground.getY()+ground.getHeight() - 4);
				acorn.isLive = false;
			}
			acorn.sprite.rotate(acorn.rotationSpeed * delta);
			
			if(Intersector.overlaps(acorn.boundingCircle, ground.getBoundingRectangle())) {
				acorn.speed = 0;
				acorn.xspeed = 0;
				acorn.rotationSpeed = 0;
			}
		}
		
		if(TimeUtils.nanoTime() - lastAcornTime > 2500000000L) {
			lastAcornTime = TimeUtils.nanoTime();
			Acorn acorn = new Acorn();
			acorn.sprite = new Sprite(acornTexture);
			float randomValue = MathUtils.random(40, 160);
			acorn.sprite.setPosition(randomValue, game.height);
			acorn.sprite.setSize(acornTexture.getWidth(), acornTexture.getHeight());
			acorn.boundingCircle = new Circle(acorn.sprite.getX() + 12, acorn.sprite.getY() + 13, 10);
			acorns.add(acorn);
			for(Stick stick : sticks) {
				stick.hasHit = false;
				stick.canScore = true;
			}
		}
	}

	@Override
	public void show() {
	}

	@Override
	public void resize(int width, int height) {
		viewport.update(width, height);
		Camera camera = viewport.getCamera();
		camera.position.x = game.width/2;
		camera.position.y = game.height - viewport.getWorldHeight()/2;
		camera.update();
		
		if(game.height - viewport.getWorldHeight() < -70) {
			ground.setPosition(0, game.height - viewport.getWorldHeight());
		}
		else {
			ground.setPosition(0, -70);
		}
		playButtonRect.y = (game.height - 200 + ground.getY() + ground.getHeight())/2;
	}
	
	@Override
	public void pause() {
	}

	@Override
	public void resume() {
	}

	@Override
	public void hide() {
	}

	@Override
	public void dispose() {
	}
}
